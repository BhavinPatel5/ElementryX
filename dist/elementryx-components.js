!function(n,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports):"function"==typeof define&&define.amd?define(["exports"],o):o((n="undefined"!=typeof globalThis?globalThis:n||self).ElementryX={})}(this,(function(n){"use strict";class o extends HTMLElement{constructor(){super();const n=this.attachShadow({mode:"open"}),o=document.createElement("button");o.classList.add("ex-button"),o.textContent=this.getAttribute("label")||"Click Me",o.addEventListener("click",(n=>{this.createRipple(n)}));const t=document.createElement("style");t.textContent="\n          :host {\n              --primary-color: #1a5cff; /* Button color */\n              --text-color-light: white; /* Text color for light mode */\n              --transition-duration: 0.3s;\n          }\n\n          :host([dark]) {\n              --primary-color: #005bb5; /* Darker shade for dark mode */\n              --text-color-light: white; /* Text color for dark mode */\n          }\n\n          .ex-button {\n              position: relative;\n              overflow: hidden;\n              background-color: var(--primary-color);\n              color: var(--text-color-light);\n              border: none;\n              border-radius: 4px;\n              padding: 10px 15px;\n              cursor: pointer;\n              font-size: 16px;\n              transition: box-shadow var(--transition-duration);\n              box-shadow: 0 10px 20px -10px rgba(26, 92, 255, 0.5);\n          }\n\n          .ex-button:active {\n              box-shadow: none;\n          }\n\n          .ripple {\n              position: absolute;\n              background: rgba(0, 0, 0, 0.3);\n              border-radius: 50%;\n              transform: scale(0);\n              animation: ripple-animation 0.8s linear;\n              pointer-events: none;\n          }\n\n          @keyframes ripple-animation {\n              to {\n                  transform: scale(4);\n                  opacity: 0;\n              }\n          }\n      ",n.appendChild(t),n.appendChild(o)}createRipple(n){const o=this.shadowRoot.querySelector(".ex-button"),t=document.createElement("span");t.classList.add("ripple");const e=o.getBoundingClientRect(),r=Math.max(e.width,e.height);t.style.width=t.style.height=`${r}px`,t.style.left=n.clientX-e.left-r/2+"px",t.style.top=n.clientY-e.top-r/2+"px",o.appendChild(t),t.addEventListener("animationend",(()=>{t.remove()}))}}customElements.define("ex-button",o);class t extends HTMLElement{constructor(){super();const n=this.attachShadow({mode:"open"}),o=document.createElement("div");o.classList.add("dropdown-container");const t=document.createElement("div");t.classList.add("dropdown-display","closed");const e=document.createElement("span");e.classList.add("dropdown-placeholder"),e.textContent="Select an option";const r=document.createElement("span");r.classList.add("dropdown-arrow"),t.appendChild(e),t.appendChild(r);const a=document.createElement("div");a.classList.add("dropdown-options");this.getAttribute("options").split(",").forEach((n=>{const o=document.createElement("div");o.classList.add("dropdown-option"),o.textContent=n.trim(),o.addEventListener("click",(()=>{e.textContent=o.textContent,e.classList.remove("dropdown-placeholder"),a.classList.remove("open"),r.classList.remove("open"),t.classList.add("closed")})),a.appendChild(o)})),t.addEventListener("click",(()=>{const n=a.classList.toggle("open");r.classList.toggle("open"),t.classList.toggle("closed",!n)})),o.appendChild(t),o.appendChild(a);const d=document.createElement("style");d.textContent="\n      /* Main container styling */\n      .dropdown-container {\n        position: relative;\n        width: 200px;\n        font-family: Arial, sans-serif;\n      }\n\n      /* Display (button) styling for light and dark modes */\n      .dropdown-display {\n        background-color: var(--background, #F2F2F2);\n        color: var(--text, black);\n        padding: 10px;\n        border-radius: 4px; /* Full rounded corners when closed */\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        position: relative;\n        z-index: 2; /* Higher than options list */\n        transition: box-shadow 0.3s, background-color 0.3s, border-radius 0.3s;\n      }\n\n      /* When the list is open, remove bottom radius for a seamless look */\n      .dropdown-display:not(.closed) {\n        border-radius: 4px 4px 0 0; /* Rounded top, flat bottom when list is open */\n      }\n\n      /* Placeholder text */\n      .dropdown-placeholder {\n        color: rgba(0, 0, 0, 0.5); /* Dimmer color for placeholder */\n      }\n\n      /* Display hover effect */\n      .dropdown-display:hover {\n        background-color: var(--hover-background, #FFFFFF);\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      }\n\n      /* Arrow as a CSS triangle */\n      .dropdown-arrow {\n        width: 0;\n        height: 0;\n        border-left: 5px solid transparent;\n        border-right: 5px solid transparent;\n        border-top: 6px solid black; /* Color of the triangle */\n        transition: transform 0.3s ease;\n      }\n\n      /* Rotate arrow on open */\n      .dropdown-arrow.open {\n        transform: rotate(180deg);\n      }\n\n      /* Options list styling for light mode */\n      .dropdown-options {\n        position: absolute;\n        top: 100%;\n        left: 0;\n        width: 100%;\n        background-color: var(--dropdown-background, #FFFFFF);\n        border-radius: 0 0 4px 4px; /* Rounded bottom only to align with display */\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        overflow: hidden;\n        max-height: 0;\n        opacity: 0;\n        z-index: 1; /* Lower than display */\n        transform: translateY(-2px); /* Slight overlap with display */\n        transition: max-height 0.3s ease, opacity 0.3s ease, transform 0.3s ease;\n      }\n\n      /* Open class to show dropdown */\n      .dropdown-options.open {\n        max-height: 150px;\n        opacity: 1;\n        transform: translateY(0); /* Align normally when open */\n      }\n\n      /* Individual options styling */\n      .dropdown-option {\n        padding: 10px;\n        color: var(--option-color, black);\n        transition: color 0.3s ease, transform 0.3s ease;\n        cursor: pointer;\n      }\n\n      /* Hover effect on options */\n      .dropdown-option:hover {\n        color: rgba(26, 92, 255, 0.8);\n        transform: translateX(5px);\n      }\n\n      /* Dark mode styling */\n      :host([dark]) .dropdown-display {\n        background-color: #353739;\n        color: #FFFFFF;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n      }\n\n      :host([dark]) .dropdown-placeholder {\n        color: rgba(255, 255, 255, 0.6); /* Dimmer color for dark mode placeholder */\n      }\n\n      :host([dark]) .dropdown-display:hover {\n        background-color: #626365;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);\n      }\n\n      :host([dark]) .dropdown-options {\n        background-color: #626365;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n      }\n\n      :host([dark]) .dropdown-option {\n        color: #FFFFFF;\n      }\n\n      :host([dark]) .dropdown-option:hover {\n        color: rgba(26, 92, 255, 0.8);\n        transform: translateX(5px);\n      }\n    ",n.appendChild(d),n.appendChild(o)}}customElements.define("ex-dropdown",t),n.ExButton=o,n.ExDropdown=t,Object.defineProperty(n,"__esModule",{value:!0})}));
//# sourceMappingURL=elementryx-components.js.map
