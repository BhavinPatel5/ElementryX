{"version":3,"file":"elementryx-components.js","sources":["../src/ex-button.js","../src/ex-dropdown.js"],"sourcesContent":["class ExButton extends HTMLElement {\r\n  constructor() {\r\n      super();\r\n      const shadow = this.attachShadow({ mode: 'open' });\r\n\r\n      const button = document.createElement('button');\r\n      button.classList.add('ex-button');\r\n\r\n      // Set button label\r\n      button.textContent = this.getAttribute('label') || 'Click Me';\r\n\r\n      // Event listener for button click\r\n      button.addEventListener('click', (event) => {\r\n          this.createRipple(event);\r\n      });\r\n\r\n      const style = document.createElement('style');\r\n      style.textContent = `\r\n          :host {\r\n              --primary-color: #1a5cff; /* Button color */\r\n              --text-color-light: white; /* Text color for light mode */\r\n              --transition-duration: 0.3s;\r\n          }\r\n\r\n          :host([dark]) {\r\n              --primary-color: #005bb5; /* Darker shade for dark mode */\r\n              --text-color-light: white; /* Text color for dark mode */\r\n          }\r\n\r\n          .ex-button {\r\n              position: relative;\r\n              overflow: hidden;\r\n              background-color: var(--primary-color);\r\n              color: var(--text-color-light);\r\n              border: none;\r\n              border-radius: 4px;\r\n              padding: 10px 15px;\r\n              cursor: pointer;\r\n              font-size: 16px;\r\n              transition: box-shadow var(--transition-duration);\r\n              box-shadow: 0 10px 20px -10px rgba(26, 92, 255, 0.5);\r\n          }\r\n\r\n          .ex-button:active {\r\n              box-shadow: none;\r\n          }\r\n\r\n          .ripple {\r\n              position: absolute;\r\n              background: rgba(0, 0, 0, 0.3);\r\n              border-radius: 50%;\r\n              transform: scale(0);\r\n              animation: ripple-animation 0.8s linear;\r\n              pointer-events: none;\r\n          }\r\n\r\n          @keyframes ripple-animation {\r\n              to {\r\n                  transform: scale(4);\r\n                  opacity: 0;\r\n              }\r\n          }\r\n      `;\r\n\r\n      shadow.appendChild(style);\r\n      shadow.appendChild(button);\r\n  }\r\n\r\n  createRipple(event) {\r\n      const button = this.shadowRoot.querySelector('.ex-button');\r\n      const ripple = document.createElement('span');\r\n      ripple.classList.add('ripple');\r\n\r\n      const rect = button.getBoundingClientRect();\r\n      const size = Math.max(rect.width, rect.height);\r\n      ripple.style.width = ripple.style.height = `${size}px`;\r\n      ripple.style.left = `${event.clientX - rect.left - size / 2}px`;\r\n      ripple.style.top = `${event.clientY - rect.top - size / 2}px`;\r\n\r\n      button.appendChild(ripple);\r\n\r\n      ripple.addEventListener('animationend', () => {\r\n          ripple.remove();\r\n      });\r\n  }\r\n}\r\n\r\ncustomElements.define('ex-button', ExButton);\r\nexport default ExButton;\r\n","class ExDropdown extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n    const shadow = this.attachShadow({ mode: 'open' });\r\n\r\n    // Create a container for the dropdown\r\n    const container = document.createElement('div');\r\n    container.classList.add('dropdown-container');\r\n\r\n    // Display element with arrow\r\n    const display = document.createElement('div');\r\n    display.classList.add('dropdown-display', 'closed'); // Initial class for closed state\r\n\r\n    const displayText = document.createElement('span');\r\n    displayText.classList.add('dropdown-placeholder');\r\n    displayText.textContent = 'Select an option'; // Placeholder text\r\n\r\n    // Arrow element as a triangle\r\n    const arrow = document.createElement('span');\r\n    arrow.classList.add('dropdown-arrow');\r\n\r\n    display.appendChild(displayText);\r\n    display.appendChild(arrow);\r\n\r\n    // Options list container\r\n    const optionsList = document.createElement('div');\r\n    optionsList.classList.add('dropdown-options');\r\n\r\n    // Populate options\r\n    const options = this.getAttribute('options').split(',');\r\n    options.forEach(optionText => {\r\n      const option = document.createElement('div');\r\n      option.classList.add('dropdown-option');\r\n      option.textContent = optionText.trim();\r\n\r\n      // Option click event to set selected value\r\n      option.addEventListener('click', () => {\r\n        displayText.textContent = option.textContent; // Update display with selected option\r\n        displayText.classList.remove('dropdown-placeholder'); // Remove placeholder style\r\n        optionsList.classList.remove('open'); // Hide options list\r\n        arrow.classList.remove('open'); // Reset arrow rotation\r\n        display.classList.add('closed'); // Apply closed styling to display\r\n      });\r\n\r\n      // Append each option to options list\r\n      optionsList.appendChild(option);\r\n    });\r\n\r\n    // Toggle dropdown on click\r\n    display.addEventListener('click', () => {\r\n      const isOpen = optionsList.classList.toggle('open'); // Show/hide options list\r\n      arrow.classList.toggle('open'); // Rotate arrow\r\n      display.classList.toggle('closed', !isOpen); // Toggle closed styling based on list state\r\n    });\r\n\r\n    // Append elements to the container\r\n    container.appendChild(display);\r\n    container.appendChild(optionsList);\r\n\r\n    // Style for the component\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      /* Main container styling */\r\n      .dropdown-container {\r\n        position: relative;\r\n        width: 200px;\r\n        font-family: Arial, sans-serif;\r\n      }\r\n\r\n      /* Display (button) styling for light and dark modes */\r\n      .dropdown-display {\r\n        background-color: var(--background, #F2F2F2);\r\n        color: var(--text, black);\r\n        padding: 10px;\r\n        border-radius: 4px; /* Full rounded corners when closed */\r\n        cursor: pointer;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n        position: relative;\r\n        z-index: 2; /* Higher than options list */\r\n        transition: box-shadow 0.3s, background-color 0.3s, border-radius 0.3s;\r\n      }\r\n\r\n      /* When the list is open, remove bottom radius for a seamless look */\r\n      .dropdown-display:not(.closed) {\r\n        border-radius: 4px 4px 0 0; /* Rounded top, flat bottom when list is open */\r\n      }\r\n\r\n      /* Placeholder text */\r\n      .dropdown-placeholder {\r\n        color: rgba(0, 0, 0, 0.5); /* Dimmer color for placeholder */\r\n      }\r\n\r\n      /* Display hover effect */\r\n      .dropdown-display:hover {\r\n        background-color: var(--hover-background, #FFFFFF);\r\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n      }\r\n\r\n      /* Arrow as a CSS triangle */\r\n      .dropdown-arrow {\r\n        width: 0;\r\n        height: 0;\r\n        border-left: 5px solid transparent;\r\n        border-right: 5px solid transparent;\r\n        border-top: 6px solid black; /* Color of the triangle */\r\n        transition: transform 0.3s ease;\r\n      }\r\n\r\n      /* Rotate arrow on open */\r\n      .dropdown-arrow.open {\r\n        transform: rotate(180deg);\r\n      }\r\n\r\n      /* Options list styling for light mode */\r\n      .dropdown-options {\r\n        position: absolute;\r\n        top: 100%;\r\n        left: 0;\r\n        width: 100%;\r\n        background-color: var(--dropdown-background, #FFFFFF);\r\n        border-radius: 0 0 4px 4px; /* Rounded bottom only to align with display */\r\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n        overflow: hidden;\r\n        max-height: 0;\r\n        opacity: 0;\r\n        z-index: 1; /* Lower than display */\r\n        transform: translateY(-2px); /* Slight overlap with display */\r\n        transition: max-height 0.3s ease, opacity 0.3s ease, transform 0.3s ease;\r\n      }\r\n\r\n      /* Open class to show dropdown */\r\n      .dropdown-options.open {\r\n        max-height: 150px;\r\n        opacity: 1;\r\n        transform: translateY(0); /* Align normally when open */\r\n      }\r\n\r\n      /* Individual options styling */\r\n      .dropdown-option {\r\n        padding: 10px;\r\n        color: var(--option-color, black);\r\n        transition: color 0.3s ease, transform 0.3s ease;\r\n        cursor: pointer;\r\n      }\r\n\r\n      /* Hover effect on options */\r\n      .dropdown-option:hover {\r\n        color: rgba(26, 92, 255, 0.8);\r\n        transform: translateX(5px);\r\n      }\r\n\r\n      /* Dark mode styling */\r\n      :host([dark]) .dropdown-display {\r\n        background-color: #353739;\r\n        color: #FFFFFF;\r\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n      }\r\n\r\n      :host([dark]) .dropdown-placeholder {\r\n        color: rgba(255, 255, 255, 0.6); /* Dimmer color for dark mode placeholder */\r\n      }\r\n\r\n      :host([dark]) .dropdown-display:hover {\r\n        background-color: #626365;\r\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);\r\n      }\r\n\r\n      :host([dark]) .dropdown-options {\r\n        background-color: #626365;\r\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n      }\r\n\r\n      :host([dark]) .dropdown-option {\r\n        color: #FFFFFF;\r\n      }\r\n\r\n      :host([dark]) .dropdown-option:hover {\r\n        color: rgba(26, 92, 255, 0.8);\r\n        transform: translateX(5px);\r\n      }\r\n    `;\r\n\r\n    // Append styles and container to shadow DOM\r\n    shadow.appendChild(style);\r\n    shadow.appendChild(container);\r\n  }\r\n}\r\n\r\ncustomElements.define('ex-dropdown', ExDropdown);\r\nexport default ExDropdown;\r\n"],"names":["ExButton","HTMLElement","constructor","super","shadow","this","attachShadow","mode","button","document","createElement","classList","add","textContent","getAttribute","addEventListener","event","createRipple","style","appendChild","shadowRoot","querySelector","ripple","rect","getBoundingClientRect","size","Math","max","width","height","left","clientX","top","clientY","remove","customElements","define","ExDropdown","container","display","displayText","arrow","optionsList","split","forEach","optionText","option","trim","isOpen","toggle"],"mappings":"kPAAA,MAAMA,UAAiBC,YACrB,WAAAC,GACIC,QACA,MAAMC,EAASC,KAAKC,aAAa,CAAEC,KAAM,SAEnCC,EAASC,SAASC,cAAc,UACtCF,EAAOG,UAAUC,IAAI,aAGrBJ,EAAOK,YAAcR,KAAKS,aAAa,UAAY,WAGnDN,EAAOO,iBAAiB,SAAUC,IAC9BX,KAAKY,aAAaD,EAAM,IAG5B,MAAME,EAAQT,SAASC,cAAc,SACrCQ,EAAML,YAAc,k6CA+CpBT,EAAOe,YAAYD,GACnBd,EAAOe,YAAYX,EACtB,CAED,YAAAS,CAAaD,GACT,MAAMR,EAASH,KAAKe,WAAWC,cAAc,cACvCC,EAASb,SAASC,cAAc,QACtCY,EAAOX,UAAUC,IAAI,UAErB,MAAMW,EAAOf,EAAOgB,wBACdC,EAAOC,KAAKC,IAAIJ,EAAKK,MAAOL,EAAKM,QACvCP,EAAOJ,MAAMU,MAAQN,EAAOJ,MAAMW,OAAS,GAAGJ,MAC9CH,EAAOJ,MAAMY,KAAUd,EAAMe,QAAUR,EAAKO,KAAOL,EAAO,EAAtC,KACpBH,EAAOJ,MAAMc,IAAShB,EAAMiB,QAAUV,EAAKS,IAAMP,EAAO,EAArC,KAEnBjB,EAAOW,YAAYG,GAEnBA,EAAOP,iBAAiB,gBAAgB,KACpCO,EAAOY,QAAQ,GAEtB,EAGHC,eAAeC,OAAO,YAAapC,GCvFnC,MAAMqC,UAAmBpC,YACvB,WAAAC,GACEC,QACA,MAAMC,EAASC,KAAKC,aAAa,CAAEC,KAAM,SAGnC+B,EAAY7B,SAASC,cAAc,OACzC4B,EAAU3B,UAAUC,IAAI,sBAGxB,MAAM2B,EAAU9B,SAASC,cAAc,OACvC6B,EAAQ5B,UAAUC,IAAI,mBAAoB,UAE1C,MAAM4B,EAAc/B,SAASC,cAAc,QAC3C8B,EAAY7B,UAAUC,IAAI,wBAC1B4B,EAAY3B,YAAc,mBAG1B,MAAM4B,EAAQhC,SAASC,cAAc,QACrC+B,EAAM9B,UAAUC,IAAI,kBAEpB2B,EAAQpB,YAAYqB,GACpBD,EAAQpB,YAAYsB,GAGpB,MAAMC,EAAcjC,SAASC,cAAc,OAC3CgC,EAAY/B,UAAUC,IAAI,oBAGVP,KAAKS,aAAa,WAAW6B,MAAM,KAC3CC,SAAQC,IACd,MAAMC,EAASrC,SAASC,cAAc,OACtCoC,EAAOnC,UAAUC,IAAI,mBACrBkC,EAAOjC,YAAcgC,EAAWE,OAGhCD,EAAO/B,iBAAiB,SAAS,KAC/ByB,EAAY3B,YAAciC,EAAOjC,YACjC2B,EAAY7B,UAAUuB,OAAO,wBAC7BQ,EAAY/B,UAAUuB,OAAO,QAC7BO,EAAM9B,UAAUuB,OAAO,QACvBK,EAAQ5B,UAAUC,IAAI,SAAS,IAIjC8B,EAAYvB,YAAY2B,EAAO,IAIjCP,EAAQxB,iBAAiB,SAAS,KAChC,MAAMiC,EAASN,EAAY/B,UAAUsC,OAAO,QAC5CR,EAAM9B,UAAUsC,OAAO,QACvBV,EAAQ5B,UAAUsC,OAAO,UAAWD,EAAO,IAI7CV,EAAUnB,YAAYoB,GACtBD,EAAUnB,YAAYuB,GAGtB,MAAMxB,EAAQT,SAASC,cAAc,SACrCQ,EAAML,YAAc,0vHA6HpBT,EAAOe,YAAYD,GACnBd,EAAOe,YAAYmB,EACpB,EAGHH,eAAeC,OAAO,cAAeC"}